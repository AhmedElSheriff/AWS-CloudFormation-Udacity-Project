Description: >
  IAC-Project Servers Deployment Template

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  AMI:
    Description: The Amazon Machine Image to be used in the launch config
    Type: String

  InstanceType:
    Description: The Amazon EC2 Instance to be used in the launch config
    Type: String

  VolumeSize:
    Description: The volume size for the EC2 Instance to be used in the launch config
    Type: String

  DeviceName:
    Description: The device name for the volume of the EC2 Instance to be used in the launch config
    Type: String

  KeyName:
    Description: The keypair name to be used in the launch config
    Type: String

  WebAppServersMinSize:
    Description: The minimum number of ec2 instance to be running
    Type: String

  WebAppServersMaxSize:
    Description: The maximum number of ec2 instance to be running
    Type: String

  NetworkAccessIP:
    Description: The IP Address that will be permitted to access the jump box
    Type: String

Resources:

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service
          cd /var/www/html
          echo "it works! Udagram, Udacity" > index.html

          # sudo apt-get install awscli -y
          # sudo aws s3 cp ${S3Repo} /var/www/html
          # sudo systemctl restart apache2.service          
      ImageId: !Ref AMI
      KeyName: !Ref KeyName
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
      - DeviceName: !Ref DeviceName
        Ebs:
          VolumeSize: !Ref VolumeSize
          
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: !Ref WebAppServersMinSize
      MaxSize: !Ref WebAppServersMaxSize
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"


  ########## JUMP BOX #########
  JumpBoxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH Access to the jump box
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref NetworkAccessIP
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  JumpBoxEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
    - JumpBoxSecurityGroup
    Properties:
      # IamInstanceProfile: !Ref InstanceProfileWithS3Role
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      KeyName: jump-box-keyname
      SecurityGroupIds:
      - Ref: JumpBoxSecurityGroup
      SubnetId: 
        Fn::ImportValue: 
          !Sub "${EnvironmentName}-PUB1-SN"

  JumpBoxEIP:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc

  JumpBoxEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    DependsOn:
    - JumpBoxEC2Instance
    - JumpBoxEIP
    Properties:
      InstanceId:
        Ref: JumpBoxEC2Instance
      AllocationId: !GetAtt JumpBoxEIP.AllocationId

Outputs:

  LoadBalancerDNSName:
    Description: DNS Name of the web application
    Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]
    Export:
      Name: !Sub "${EnvironmentName}-DNS-NAME"